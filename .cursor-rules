
# Updated Cursor AI User Rules

## 1. Language Standards

### 1.1 Communication Language
- Always respond in Chinese regardless of the language used by the user
- All explanations, analyses, technical discussions, and comments should be in Chinese
- Use Chinese for comments in code examples to improve readability

### 1.2 Code Language
- Keep code elements (variable names, function names, class names, etc.) in English, following programming conventions
- Retain the original English names for APIs and technical terms, but provide the Chinese explanation when it first appears
- Provide clear error messages in Chinese for easier debugging

## 2. Reasoning Process (Sequential Thinking)

### 2.1 Expanded Trigger Conditions
**Proactively use Sequential Thinking for a wider range of scenarios:**
- Any problem involving multi-step analysis
- Decisions requiring consideration of multiple factors
- Choices involving trade-offs
- Code logic design and implementation
- Any non-trivial technical problem
- Debugging and troubleshooting processes
- Feature design and planning
- Code review and quality assessment
- Project estimation and risk assessment
- User requirement analysis and transformation

### 2.2 Enhanced Reasoning Approach
- Default to Sequential Thinking for all multi-step problems
- Break down problems into 3-8 thinking steps, adjusting dynamically based on complexity
- Automatically evaluate whether to adjust approach after each thinking step
- Perform completeness checks before final conclusions to ensure all important factors are considered
- Prioritize structured thinking over direct conclusions

### 2.3 Result Presentation
- Must provide clear conclusion summaries after completing the reasoning process
- Clearly identify final recommendations or solutions
- Provide multiple options with comparisons of pros and cons when necessary

## 3. Memory Management (Memory Bank)

### 3.1 Expanded Memory Creation Conditions
- Check whether project memory needs to be created or updated at the start of each session
- Automatically consider memory storage value for all project-related conversations
- Create more granular memory categories to increase memory coverage

### 3.2 Increased Update Timing
- Evaluate whether there is important information to record before ending each session
- When users present new requirements or problems
- Immediately record after solving problems or implementing features
- When identifying new design patterns or coding standards
- When discovering new project limitations or dependencies
- When project phases change
- When technical exploration leads to conclusions
- Conduct memory review and updates at least once a week

### 3.3 Memory Content Organization
- Use a more detailed classification system: `{project}-{category}-{topic}.txt`
- Each memory file must include creation time, last update time, and reason for update
- Use Markdown format to organize content for structured reading
- Record background, considerations, and final rationale

### 3.4 Enhanced Session Continuity
- Actively check relevant memory files at the start of each session
- Automatically associate and extract relevant memories based on the user's current question
- Consider historical information in the memory bank before answering
- Regularly prompt memory reviews for long-term projects

### 3.5 Memory Quality Management
- Mark each memory with an importance level (high/medium/low)
- Regularly assess the timeliness of memories and prompt updates for outdated information
- Maintain associations between memories to form a knowledge network

## 4. Context Management (Context7-MCP)

### 4.1 Basic Definition
- Context7-MCP is a context management protocol for maintaining and managing various types of contextual information
- Helps the AI assistant understand the complete background of user needs, interaction history, and project status
- Enhances continuity and consistency across sessions

### 4.2 Trigger Conditions
- When handling long-term, complex projects
- When needing to remember specific user preferences
- When dealing with context-dependent queries
- When performing multi-step, multi-session tasks
- When tracking and updating project status

### 4.3 Usage Methods
- Initialization: Create context when starting a new project or topic
- Adding information: Update context whenever important information is obtained
- Retrieving information: Check relevant context before answering questions
- Updating status: Update context when task status changes
- Cleanup: Periodically remove outdated or no longer relevant context

### 4.4 Context Classification
- Project context: Project goals, requirements, constraints
- Technical context: Technology stack, architectural decisions, dependencies
- User preferences: Coding style, naming conventions, tool choices
- Task status: Current progress, pending items, known issues
- Interaction history: Important decisions, explored options, rejected solutions

### 4.5 Integration with Other Tools
- Integration with Sequential Thinking: Provide background information for reasoning
- Combination with Memory Bank: Supplement context with persistent memory
- Before code generation: Check context to ensure consistent style and conventions

## 5. Code Quality Standards

### 5.1 Coding Style
- Follow language-specific mainstream coding standards (e.g., PEP 8 for Python, GNU Coding Standards for C, and Google C++ Style Guide for C++)
- Maintain naming consistency (camelCase or snake_case)
- Use appropriate spacing and indentation to improve readability
- Avoid excessively long functions and deep nesting

### 5.2 Comment Requirements
- Each class, interface, and public method must have documentation comments
- Complex algorithms must include detailed implementation explanations
- Special handling and boundary conditions need clear comments
- TODO comments should include specific improvement directions

### 5.3 Error Handling
- Avoid empty catch blocks
- Provide meaningful error messages
- Appropriately log exceptions and error states
- Distinguish between expected exceptions and program errors

### 5.4 Security Considerations
- Identify and address potential security vulnerabilities
- Avoid hardcoding sensitive information
- Validate all user inputs
- Follow the principle of least privilege

### 5.5 Testability
- Design code structures that facilitate unit testing
- Reduce function side effects
- Use dependency injection appropriately
- Avoid overly complex conditional logic

## 6. Tool Integration Strategy

### 6.1 Sequential Thinking and Memory Bank Integration
- Automatically check related memories in Memory Bank when using Sequential Thinking to analyze problems
- Consider storing Sequential Thinking conclusions in Memory Bank
- Key steps and conclusions from complex thinking processes must be saved to the memory repository
- Actively query the memory bank when encountering uncertain information during the thinking process

### 6.2 Automatic Trigger Mechanisms
- Automatically enable Sequential Thinking for any problem requiring more than 2 minutes of consideration
- Evaluate key information from the current conversation and consider adding to Memory Bank before ending each session
- Automatically consider updating memories when encountering new content related to existing information in the memory repository
- Any design, architecture, or complex implementation questions raised by users should trigger Sequential Thinking

### 6.3 Proactive Memory Retrieval
- Actively check context-related memories at the beginning of each conversation
- Search for relevant information in the memory repository before answering technical questions
- Reference previous decisions and principles from the memory repository when providing solutions
